/*
 デザイン要素はできるだけXDにやらせる
 こちらで定義にするのはUnityでの挙動になるようにする

 CSSパーサは以下のものを利用
 https://jsfiddle.net/developit/vzkckrw4/
 制限： Style-Valueに{}があるとおかしくなる
 */

* {
  layer: UI;
}

/*
 BooleanGroupはImage化する
 */
booleangroup {
  image: true;
}

repeatgrid > * {
  repeatgrid-child-name: "rg-child(${childIndex})";
  layout-element: preferred;
}

/*
 横にならべる
 */
.layout-x {
  layout-group: x;
  layout-group-control-child-size: width height;
  layout-group-child-force-expand: width;
  content-size-fitter-horizontal-fit: preferred-size;
}

/*
 縦にならべる
 */
.layout-y {
  layout-group: y;
  layout-group-control-child-size: width height;
  layout-group-child-force-expand: width;
  content-size-fitter-vertical-fit: preferred-size;
}

/*
 グリッド状にならべる 横に伸びる
 */
.layout-grid-x {
  layout-group: grid;
  layout-group-control-child-size: width height;
  layout-group-child-force-expand: height;
  layout-group-start-axis: y;
  content-size-fitter-horizontal-fit: preferred-size;
}

/*
 グリッド状にならべる 縦に伸びる
 */
.layout-grid-y {
  layout-group: grid;
  layout-group-control-child-size: width height;
  layout-group-child-force-expand: width;
  layout-group-start-axis: x;
  content-size-fitter-vertical-fit: preferred-size;
}

/*
 親が自動レイアウトをもっている場合に
 これ以下のグループが必要なPREFERREDサイズを設定する
 */
.layout-rect {
  layout-element: preferred;
}

.viewport-xy {
  viewport: true;
  rect-mask-two-d: true;
  scroll-rect: x y;
  scroll-rect-content: ".content";
}

.viewport-x {
  viewport: true;
  rect-mask-two-d: true;
  scroll-rect: x;
  scroll-rect-content: ".content.layout-x";
}

.viewport-y {
  viewport: true;
  rect-mask-two-d: true;
  scroll-rect: y;
  scroll-rect-content: ".content.layout-y";
}

.viewport-grid-x {
  viewport: true;
  rect-mask-two-d: true;
  scroll-rect: x;
  scroll-rect-content: ".content.layout-grid-x";
}

.viewport-grid-y {
  viewport: true;
  rect-mask-two-d: true;
  scroll-rect: y;
  scroll-rect-content: ".content.layout-grid-y";
}

.viewport-x > .content {
  conent-size-fitter: x;
}

.viewport-y > .content {
  /*
   親と横幅がぴったり重なる
   anchor.min.x: 0
   anchor.max.x: 1
   offset.min.x: 0
   offset.max.x: 0
   */
  rect-transform-anchor-offset-x: 0 1 0 0;
}

.viewport-grid-x > .content {
  rect-transform-anchor-offset-x: 0 1 0 0;
}

.viewport-grid-y > .content {
  rect-transform-anchor-offset-y: 0 1 0 0;
}

.scrollbar-y {
  scrollbar: true;
  direction: btt;
}

.scrollbar-x {
  scrollbar: true;
  direction: ltr;
}

.dots-scrollbar {
  scrollbar: true;
  direction: ltr;
  layout-group: x;
  layout-group-spacing-x: 9px;
  conent-size-fitter-vertical-fit: preferred-size;
  conent-size-fitter-horizontal-fit: preferred-size;
}

.scrollbar-x > .handle {
  state: scrollbar-handle-rect;
  fix: l r t b;
}

.scrollbar-y > .handle {
  state: scrollbar-handle-rect;
  fix: l r t b;
}

.dots-scrollbar > .toggle {
  toggle: true;
  layout-element: min;
}

.toggle > .image.off {
  state: off;
}

/*
 こちらが定義されていれば、offとonでイメージ入れ替え
 */
.toggle > .image.on {
  state: on;
}

/*
 こちらが定義されていれば、offイメージにcheckedイメージが重なる
 */
.toggle > .image.checked {
  state: checked;
}

.image {
  image: true;
}

.comp-image {
  image: true;
  component: true;
}

/*
 textはtext mesh proとして出力する
 */
.text {
  text: true;
}

.button {
  button: true;
}

#menu > * > .text {
  unity-name: "unity-text";
  repeatgrid-attach-text-data-series: "1" "2" "3"
}


